import Koa from 'koa'
import bodyParser from 'koa-bodyparser'
import convert from 'koa-convert'
import logger from 'koa-logger'
import session from 'koa-generic-session'
import passport from 'koa-passport'
import mount from 'koa-mount'
import serve from 'koa-static'
import helmet from 'koa-helmet'
// import http2 from 'http2'
// import fs from 'fs'
import config from '../config'
import {
	errorMiddleware
} from '../src/middleware'
import {
	serveSwagger
} from 'swagger-generator-koa'

const app = new Koa()
app.keys = [config.session]

// replace these with your certificate information
// const options = {
//   cert: fs.readFileSync('./cert/localhost.cert'),
//   key: fs.readFileSync('./cert/localhost.key')
// }

// --------------------- start -------------------------
// Instead of calling convert for all legacy middlewares
// just use the following to convert them all at once

const _use = app.use
app.use = x => _use.call(app, convert(x))

// The code above avoids writting the following
// app.use(convert(logger()))
// ---------------------- end --------------------------
app.use(helmet())
app.use(logger())
app.use(bodyParser())
app.use(session())
app.use(errorMiddleware())

app.use(async (ctx, next) => {
	try {
		await next();
	} catch (err) {
		ctx.status = err.status || err.code || 500;
		ctx.body = {
			error: err.code,
			message: err.message,
			errors: err.errors
		};
	}
});

// Mount static API documents generated by api-generator
app.use(mount('/docs', serve(`${process.cwd()}/docs`)))

// Using Passport for authentication
require('../config/passport')
app.use(passport.initialize())
app.use(passport.session())

// Using module wise routing
const modules1 = require('../src/modules/v1')
const modules2 = require('../src/modules/v2')
const common = require('../src/modules/common')

Promise.all([modules1(app), modules2(app), common(app)]).then(function (values) {
	if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {
		const options = {
			title: 'swagger-generator-koa',
			version: '1.0.0',
			host: 'localhost:3000',
			basePath: '/',
			schemes: ['http', 'https'],
			securityDefinitions: {
				Bearer: {
					description: 'Example value:- Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU5MmQwMGJhNTJjYjJjM',
					type: 'apiKey',
					name: 'Authorization',
					in: 'header'
				}
			},
			security: [{
				Bearer: []
			}],
			defaultSecurity: 'Bearer'
		};
		serveSwagger(app, '/swagger', options, {
			requestModelPath: './src/requestModel',
			responseModelPath: './src/responseModel'
		});
	}
}).catch((error) => {
	throw error;
});

// Using http2 to work with http/2 instead of http/1.x
// http2
//   .createSecureServer(options, app.callback())
//   .listen(config.port, () => {
//     console.log(`Server started on ${config.port}`)
//   })

app.listen(config.port, () => {
	console.log(`Server started on ${config.port}`)
})

export default app
